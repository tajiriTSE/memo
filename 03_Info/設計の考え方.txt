■詳細設計
ロジックが書いてあれば良い
ここにかいてあることだけを製造・試験する
何も言わずにプログラマーが作れるのを意識する

-------------------------------------------------------

設計とは
基本・画面・機能・詳細

やりたいことが上に行くほど書いてある

基本：お客様が言っていることを書く
たまにすごい細かいことが書いてある　例外
お客様と整合する内容を書く
たまにプログラムに詳しいお客様がいると基本設計にも細かいことも書いてある
お客様とこの内容で作るけどいいですよね、というのを整合するためなので
動きについて書かれているのが基本設計

プログラムについては一切書かれていないのが基本
カツ丼でいうとこんな感じの美味しさです
何度で加熱するとかフライパン使うなどはかいてない
＝手段は書いていない　結果こういうふうになりますよをお客様と整合するのが基本設計

画面設計
基本設計と同じ、デザインに特化している
基本設計だとラフ的なのに対して、ぴっちり整合を取るのが画面設計

この２つまでをお客様に見てもらって整合を取るのが今の社内ルール


■機能設計
基本設計は完成品がこんなもんできあがるよというはなし、なのでシステム全体の話
案件1つにつき１つが基本設計
画面設計は、各アプリの各画面なので、各アプリにつき1つ

機能設計は各アプリがこんなオブジェクト設計で出来ているという内容
プログラムよりだけどプログラムそのものの話はしていない

こういう部品同士で作ったらメンテナンスしやすいよね、というために作る
クラス作ってみようとかオブジェクト指向でやってみようみたいなのを研修でやったけど、それを
オブジェクト指向とかは好みの問題も出てくる

部品化

かつをあげといて冷凍しといて、後で使いまわそうという考え方や
たまごで閉じ他状態で冷凍する人、豚肉の状態で冷凍、など好みがある
今回はこの部品のくくりでやりましょうというのが機能設計

プログラムの設計ではあるけど、概念的な話、このアプリにはこの機能がある、この機能と合体して使いやすくしましょうみたいな話
電卓でいうと画面表示のところは、与えられた数字を表示するだけの機能としましょう、など

理想でいうと、機能設計とクラス設計は違う、似てしまうのは仕方ない
部品分けするという考えだから、プログラム以外も作れるのが機能設計

概念的な話
こんなオブジェクトを持っていたらなりたつよという話
プログラマーオブジェクト、機能覧にプログラムを書ける、詳細設計を作れるなど
プログラマーはこういう能力を持っていないと成り立たないよねというのを定義する



■詳細設計
機能設計よりさらに細かく、プログラム言語も想定して記述する
一言でいうと、機能設計でやったオブジェクと設計をどう具体的にしたら成り立たせるかを考える

かつどんをつくってといわれても、味付け方法がわからない、人によってかわってしまう
担当がわかれたとき（たまごたんとう、ぶたにくたんとう）、豚肉の人が暑さ1っmだと勘違いしてしまうなど

具体的に、こうしましょうという内容を記載していく

■じゃあどこまで詳細にかくか？
処理の動きを日本語で書く

画面がある場合、画面を書く
詳細設計を各時点で画面設計は終わっているはず

きのうは３つ
GUI：GUIを通じて起こる処理をかく
イベント：GUI操作以外の何かしらのイベント（きっかけ）によって発生する処理
機能：関数のこと　なにかから呼ばれる関数　こいつだけで実装されることは基本的にない

■動作部分　一番困っている場所
動作ロジックを日本語で書いて説明する箇所

プログラムを実際に書いたら、変数宣言したりインスタンス生成などが必要だけど、それは書かない
こんな機能を作って欲しいんだよね、というのを誰かに説明するイメージ、その内容を書く
教えなきゃわからないようなところを書く

かつどん
たまごつけてからぱんこつけて、などを説明するイメージ

DBを接続するときに、DBに関しての処理内容は書かない
「DBに接続して～」と書けば良い
仮にデータを取ってくるところが誰でもわかるなら書かなくてよいが、
～～テーブルからとってくるとかは必要

DB接続するときにどういうプログラムかくんだっけ？というのは考えなくて良い
どうかくかおぼえていないけど、前やったときに取ってこれたな、と思っているならよい

こんな内容なら目的の機能を実現できるなら良い、という内容を書く

プログラムと１：１ではないけど、プログラムの知識が前提にはなっている

■プロパティ
オブジェクト指向的な考え
1つのクラスになる
メンバ変数ではなくプロパティであり、メンバ変数とは違う

メンバ変数：クラスが持っている変数は全てメンバ変数
その中にプロパティと呼ばれているものも含まれる

オブジェクトの中身を説明する必要があるものをプロパティと呼ぶ

画面でいうと、サイズの大きさや表示状態などがある
画面自体のステータスを表すもの、プロパティ

画面には小画面のデータをもたせたりはする、けど画面自体を説明するものではない
プログラム上、仕方ないから持つのがメンバ変数
この画面・オブジェクトはこういうデータを持っていないと成り立たないよね、というのがプロパティ

100%正解はない、C#ではどちらでもできるようになっている
公式ライブラリ、大文字から始まるのはプロパティ、マイクロソフトのルール

メンバ変数はprivateになっていることがおおい
プロパティはpublicになっていることがおおい
プロパティの性質上、オブジェクト外から


★ベースフォーム
言語の切り替え機能

機能設計、
処理順がうえからなっていると良い

設計を作るとき
動きから入るべき
ソースコードから、フロー化する
その動きに合わせた詳細な動きを書いていく


・試験チームがわかりやすいように詳細を書くか？
書かなくて良い

■
ソースコードから起こす場合も
動きとかを理解してこういうことをやりたかったんだなというのを逆算して基本設計にする
機能設計のオブジェクトの数と詳細設計のクラス数は必ず1：1になるとは限らない

本当の本当の理想はソースコードが設計になっている
プログラム言語も言語だからそれを読めば通じるようになっているはず

・詳細設計書くとき、見た目に拘るコントロールのチェック処理などは逐一記載する必要はあるか？
後輩に対して作っとけよと指示を出すときに、やらせたいことは詳細設計に書く、いい感じにやっておいてくれれば良いなら書かなくて良い
プログラマとして常識な内容は、いい感じにやって置けるはずだから書かなくて良い


