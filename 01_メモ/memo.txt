- 見積もりに使うファイル
\\192.168.10.46\work\project\社内ルール、文書テンプレート\プロジェクトフォルダ構成ルール\案件フォルダ_ver2.0.0\02_見積もり\1_社内見積書
- アーカイブフォルダ
\\192.168.15.4\01 ティーエスイー\project\Libra

------------------------------------------------
■出町さん
トレサアプリ、打ち合わせの同席依頼、誰が対応するかを決めるのは誰か
自分の工数を計上しなくてよいか


■定例会





■python案件
手塚さん：担当のPL
森田：担当管理者
渡辺：

■概要
今週の火曜日、ファイルフォースでTSEにソースコードなど一式を送った
たぶん不十分なところもある、今後は整理しながらやっていきたい
先週の打ち合わせの議事にあるとおり、
・別件んカメラ画像検査ソフトの困りごとがあるについて
殆どの車に車載カメラがある、最終工程でレンズの汚れがないかチェックする検査ソフトがある
動くはするけどエラーが起きたり、使っていく中で使い勝手が悪かったりする
プログラムが汚い、どれがどう関連するかわからない、リファクタリングをして完成度を上げたい
希望納期は１月末、だいたいはPythonVer3で作られているが、違うものもあるかもしれない　Javaなど
２００１年から作られている
もともと狭山工場で検査部門が作った、IBMのひとに作ってもらった、ほぼドキュメントがない
要求仕様書がない、送った一式が全て

ソフトはしきい値に対してOKNG（画像のくもりぐあい）をだす
PCがフリーズすることがある、解析はしてもらいたい

全体、
１．現行ソースを下にドキュメント作成＆ソフト設計
２．ソフト改造（改造じゃなくて、新規作成かもしれない

■日程
インストール、MAPとELP　拠点のこと？　
１月の２０からPreInstall
２月から試作車がながれる、画像通信確認と学習用データ取得をやりたい
2/17ソフトウェアのアップデータ
４月、量産しようにしてオペレーターに使い方も教える、７月でTWから現場に引き渡す

２拠点目ELPは２ヶ月くらい遅れてやっていく

１月２０までにやらなきゃいけないことを決めてある
NGしきい値の設定
LETとの通信検証（量産現場の困りごと

GUIの使い勝手改善の検討とマニュアル作成を１・２０に向けて最初にやってもらいたい
１１月と１２月の進め方を決めたい

■こまりごと
マニュアル無いよというのが多い
だんまり停止、どう対処したら良いかわからない、それもマニュアル化したい
落ちてしまうのは運用で回避しているか？　→　寄居は落ちない
寄居・アメリカ・タイ・インド　にはいっている、寄居はそんなに落ちていない
IT部門によるフリーズが多い可能性もある、勝手にセキュリティソフトなどがアップデートされる

通信でだんまりが多い、それを一番最初にやりたい

・リファクタリング
・ドキュメント
・困り毎の改造　←の１つが通信

画像解析ニオロジックは変えずに、ユーザーの使い勝手を変えたい
本当のMUSTは動けば良い

■画像検査の中身
LETからTCPIPで検査データが送られてくる
IFアプリ、サーバーに送る
サーバーが解析する
IFアプリを改造したい、画像解析アプリは変えなくても良い







-------------------------------------------------------
自分やること
★★ARTEMIS、次回リリースの日程を決める、決めたら見塚さんへ連絡する



-------------------------------------------------------

■作動プロマクロ
PC
Win11で動けば良い、Officeのverは？



-------------------------------------------------------
リファクタリング
１．名称の見直し
２．処理の見直し
３．ロジックの改善
４．手法の整理・改善
５．構造の見直し

■フロントエンド
１．名称の見直し
　ファイル名
　構造体名
　変数名
　オブジェクト名
　関数名
　定数名
　要素のid
　スタイルのクラス
　コメント
　リテラル文字
　データ値
誤字脱字がないか
英単語は適切か
命名規則は守られているか
名称が正しく対象物を指しているか
名称から用途・目的・意味が理解できるか
同じ物を指すが、異なる名称を使用していないか
異なるものをさすが、同じ名称を使用していないか
他との統一感が取れているか

２．処理の見直し
エラーが出ている箇所を解決
　$refs
　unknownまたはanyになっている型の明示
リテラル文字を定数化する、データ値のみで良い
多重の入れ子になっている値を変数化する
リアクティブ性の有無による使い分け

３．ロジックの改善
無駄・不適切な処理の流れを修正
仕様を理解して冗長な処理を整理し、簡素化かつ関数化する（スケジュールプレビューなど）
単純に可読性改善の目的で、UIとビジネスロジックを分離する、ミックスイン・カスタムフックを利用
並列処理の見直し、複数のAPI呼び出しを順次ではなく同時におこなう、PromiseAll

４．手法の整理・改善
CompositionAPIの理解・利用
　リアクティブな仕組みはOptionAPIから切り替える
カスタムフックの利用
　再利用性のあるコードをまとめる
　状態管理を分離する
　コントロールの処理はカスタムコントロールのようにする、工数欄の数値制御とか
　ポリモーフィズムの様な
　
　Loading、ダイアログ表示、コンテキストメニュー、データの入れ替え
ストアの利用
　全体で扱うデータ・機能をまとめる
　全体の状態管理を分離する
Computedの利用
　計算をしているプロパティはComputedに置き換える
　Mustacheで処理を実行または関数を呼んでいる場合は、Computedに置き換える
deferの利用
　DOMに依存するスクリプトを整理する
ライフサイクルの理解
　権限系の画面表示は、DOMマウント前に制御する
　描画後に、描画が変わるようなデータ取得をしない（案件一覧のタブなど）
v-bindの見直し

ミドルウェアの利用
　権限によるページ表示を制御する、前のページに戻す
　


５．構造の見直し
コンポーネントの分け方
コンポーネントをフォルダ分けする
データを持つ箇所、データの内容・状態などをコンポーネント単位で分解、整理する








